#include <SDL2/SDL.h>
#include <iostream>

const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;

bool init() {
    bool success = true;

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cout << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        success = false;
    } else {
        gWindow = SDL_CreateWindow("SDL Polygon", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
        if (gWindow == NULL) {
            std::cout << "Window could not be created! SDL_Error: " << SDL_GetError() << std::endl;
            success = false;
        } else {
            gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
            if (gRenderer == NULL) {
                std::cout << "Renderer could not be created! SDL_Error: " << SDL_GetError() << std::endl;
                success = false;
            }
        }
    }

    return success;
}

void close() {
    SDL_DestroyRenderer(gRenderer);
    SDL_DestroyWindow(gWindow);
    SDL_Quit();
}

void drawPolygon() {
    SDL_SetRenderDrawColor(gRenderer, 255, 0, 0, 255); // Set color to red

    // Define points of the polygon
    SDL_Point points[] = {
        {SCREEN_WIDTH / 2, 50},
        {SCREEN_WIDTH - 50, SCREEN_HEIGHT - 50},
        {50, SCREEN_HEIGHT - 50}
    };

    // Draw lines between points to create the polygon
    SDL_RenderDrawLines(gRenderer, points, 3); // 3 is the number of points in the array

    // Connect last point to the first point to close the polygon
    SDL_RenderDrawLine(gRenderer, points[2].x, points[2].y, points[0].x, points[0].y);
}

int main(int argc, char* args[]) {
    if (!init()) {
        std::cout << "Failed to initialize!" << std::endl;
    } else {
        bool quit = false;
        SDL_Event e;

        while (!quit) {
            while (SDL_PollEvent(&e) != 0) {
                if (e.type == SDL_QUIT) {
                    quit = true;
                }
            }

            SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 255); // Set color to black
            SDL_RenderClear(gRenderer);

            drawPolygon();

            SDL_RenderPresent(gRenderer);
        }
    }

    close();

    return 0;
}
